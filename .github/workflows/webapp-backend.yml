name: Web Application Backend CI/CD

on:
  workflow_run:
    workflows: ["Application Gateway CI/CD"]
    types:
      - completed
    branches: [main]

jobs:
  # Sets up and tests the web application backend
  build-and-test:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    # Sets up PostgreSQL service as a Docker container for the workflow
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: 1234
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Checks out the repository code 
      - uses: actions/checkout@v2

      # Sets up Node.js version 14 
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Installs Node.js dependencies 
      - name: Install dependencies
        working-directory: ./web-application-backend
        run: npm install

      # Sets up PostgreSQL database and User and Granting Privilege to the User
      - name: Set up database
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=1234 psql -h localhost -U postgres -c "CREATE DATABASE aquatrust;"
          PGPASSWORD=1234 psql -h localhost -U postgres -c "CREATE USER jv WITH ENCRYPTED PASSWORD '1234';"
          PGPASSWORD=1234 psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE aquatrust TO jv;"

      # Runs unit tests 
      - name: Run unit tests
        working-directory: ./web-application-backend
        run: npm test

      # Starts the backend server 
      - name: Start backend server
        working-directory: ./web-application-backend
        run: |
          node app.js &
          echo $! > ./pid.file
          sleep 10

      # Tests the POST donor registration functionality
      - name: Test POST donor registration
        run: |
          response=$(curl -s -o response.txt -w "%{http_code}" \
                --location 'http://localhost:3001/registration/donors/register' \
                --header 'Content-Type: application/json' \
                --data '{
                  "company_name": "aquatrust",
                  "donor_type": "SUPPLIER",
                  "donation_allocation": "3"
                }')
          if [ $response = "201" ] || [ $response = "200" ]; then
            echo "POST donor registration successful"
            cat response.txt
          else
            echo "POST donor registration failed with status $response"
            cat response.txt
            exit 1
          fi

      # Stops the backend server after completing POST donor registration
      - name: Stop backend server
        if: always()
        run: |
          if [ -f ./web-application-backend/pid.file ]; then
            kill $(cat ./web-application-backend/pid.file)
          else
            echo "PID file not found, server may not have started"
          fi
# CD Release Pipeline for WEB APP BACKEND
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    # Log in to Dockerhub to have access  
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Pulling Backend API image from Skyrocket55's Dockerhub Repo
    - name: Pull Docker image from source
      run: docker pull skyrocket55/backend-api:1.1
    
    # Pushing Downloaded image to My Dockerhub Repo Change to latest instead of version 1.1
    - name: Tag and Push Docker image to your DockerHub
      run: |
        docker tag skyrocket55/backend-api:1.1 ${{ secrets.DOCKERHUB_USERNAME }}/backend-api:1.1
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend-api:1.1
    
    # Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        project_id: hyperledger-app
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        export_default_credentials: true    
    
    # GKE Auth plugin for Kubectl commands
    - name: Install GKE Auth Plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
    
    # Get Credentials for GKECLUSTER1
    - name: Get GKE credentials
      run: gcloud container clusters get-credentials gkecluster-1 --zone us-central1-c
    
    # Deploy Postgres and API to GKE
    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/ingress/ingress.yml
        kubectl apply -f k8s/storage/k8s-storage-class.yml
        kubectl apply -f k8s/app/web-backend/k8s-api.yml
        kubectl apply -f k8s/app/web-backend/k8s-postgres-secrets.yml
        kubectl apply -f k8s/app/web-backend/k8s-postgres.yml
    

    - name: Verify deployment
      run: |
        kubectl get pods -l app=postgres
        kubectl get services -l app=postgres 

