name: Application Gateway CI/CD 

on:
  workflow_run:
    workflows: ["Chaincode CI"]
    types:
      - completed
    branches: [main]

jobs:
  # Checks out the repository code for the workflow to run
  setup-and-test-gateway:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      # Uses the actions/checkout action to check out the repository code
      - uses: actions/checkout@v2


      # Sets up Node.js version 14 for the workflow
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Downloads and sets up Hyperledger Fabric binaries
      - name: Set up Fabric
        run: |
          curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.0 1.4.9
          echo "${{ github.workspace }}/fabric-samples/bin" >> $GITHUB_PATH
          echo "FABRIC_CFG_PATH=${{ github.workspace }}/fabric-samples/config" >> $GITHUB_ENV

      # Starts the Fabric test network and creates a channel
      - name: Start Fabric test network
        working-directory: ./fabric-samples/test-network
        run: |
          ./network.sh up createChannel -ca -c mychannel -s couchdb

      # Adds Org3 to the existing Fabric test network
      - name: Add Org3 to network
        working-directory: ./fabric-samples/test-network/addOrg3
        run: ./addOrg3.sh up

      # Deploys chaincode onto the Fabric test network
      - name: Deploy chaincode
        working-directory: ./fabric-samples/test-network
        run: |
          ./network.sh deployCC -ccn water_donation -ccv 1.0 -ccp ../../chaincode -ccl javascript -cccg ../../chaincode/collections_config.json -ccep "OR('Org1MSP.member','Org2MSP.member','Org3MSP.member')"

      # Installs Node.js dependencies for the application gateway
      - name: Install dependencies
        working-directory: ./application-gateway
        run: npm install

      # Runs addToWallet.js to set up identities for interacting with the Fabric network
      - name: Run addToWallet.js
        working-directory: ./application-gateway
        run: |
          echo "Current Directory: $(pwd)"
          node addToWallet.js

      # Tests the application gateway functionality
      - name: Test the gateway
        working-directory: ./application-gateway
        run: |
          echo "Current Directory: $(pwd)"
          echo "Starting submitDonation.js"
          timeout 10s node submitDonation.js || true
          echo "Server stopped after 10 seconds"
  
  # CD Release Pipeline 
  deploy:
    needs: setup-and-test-gateway
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    # Log in to Dockerhub to have access  
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # Pulling image from Skyrocket55's Dockerhub Repo
    - name: Pull Docker image from source
      run: docker pull skyrocket55/gateway:1.10
    
    # Pushing Downloaded image to My Dockerhub Repo Change to latest instead of version 1.10
    - name: Tag and Push Docker image to your DockerHub
      run: |
        docker tag skyrocket55/gateway:1.10 ${{ secrets.DOCKERHUB_USERNAME }}/gateway:1.10
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/gateway:1.10
    
    # Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1
      with:
        project_id: hyperledger-app
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        export_default_credentials: true    
    
    # GKE Auth plugin for Kubectl commands
    - name: Install GKE Auth Plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
    
    # Get Credentials for GKECLUSTER1
    - name: Get GKE credentials
      run: gcloud container clusters get-credentials gkecluster-1 --zone us-central1-c

    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/ingress/ingress.yml
        kubectl apply -f k8s/storage/k8s-storage-class.yml
        kubectl apply -f k8s/app/gateway/k8s-gateway.yml
    

    - name: Verify deployment
      run: |
        kubectl get pods -l app=gateway
        kubectl get services -l app=gateway        
