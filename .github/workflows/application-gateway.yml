name: Application Gateway Setup and Test

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

jobs:
  setup-and-test-gateway:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set up Fabric
        run: |
          curl -sSL https://bit.ly/2ysbOFE | bash -s -- 2.2.0 1.4.9
          echo "${{ github.workspace }}/fabric-samples/bin" >> $GITHUB_PATH
          echo "FABRIC_CFG_PATH=${{ github.workspace }}/fabric-samples/config" >> $GITHUB_ENV

      - name: Start Fabric test network
        working-directory: ./fabric-samples/test-network
        run: |
          ./network.sh up createChannel -ca -c mychannel -s couchdb

      - name: Add Org3 to network
        working-directory: ./fabric-samples/test-network/addOrg3
        run: ./addOrg3.sh up

      - name: Deploy chaincode
        working-directory: ./fabric-samples/test-network
        run: |
          ./network.sh deployCC -ccn water_donation -ccv 1.0 -ccp ../../chaincode -ccl javascript -cccg ../../chaincode/collections_config.json -ccep "OR('Org1MSP.member','Org2MSP.member','Org3MSP.member')"

      - name: Install dependencies
        working-directory: ./application-gateway
        run: npm install

      - name: Run addToWallet.js
        working-directory: ./application-gateway
        run: |
          echo "Current Directory: $(pwd)"
          node addToWallet.js

      - name: Test the gateway
        working-directory: ./application-gateway
        run: |
          echo "Starting submitDonation.js"
          node submitDonation.js &
          echo "Waiting for server to start..."
          sleep 10
          echo "Testing with Org1 (should succeed):"
          curl --location 'http://localhost:3000/api/send-donation' \
          --header 'identitylabel: User1@org1.example.com' \
          --header 'Content-Type: application/json' \
          --data '{
              "functionName": "createDonation",
              "args": ["DON001", "Org1", "100", "Water project"]
          }'
          echo "\nListing all Docker containers:"
          docker ps -a
          echo "\nChecking peer logs:"
          docker logs peer0.org1.example.com
          echo "\nChecking chaincode logs (if container exists):"
          CHAINCODE_CONTAINER=$(docker ps -aq --filter name=dev-peer0.org1.example.com-water_donation)
          if [ ! -z "$CHAINCODE_CONTAINER" ]; then
            docker logs $CHAINCODE_CONTAINER
          else
            echo "Chaincode container not found"
          fi

      - name: Install test dependencies
        working-directory: ./application-gateway
        run: npm install mocha axios --save-dev

      - name: Run comprehensive tests
        working-directory: ./application-gateway
        run: npx mocha tests/test.js